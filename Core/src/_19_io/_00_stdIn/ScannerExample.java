package _19_io._00_stdIn;

import java.util.Scanner;

public class ScannerExample {

	public static void main(String[] args) {
		/*
		 * http://mastefanov.com/wp-content/uploads/2014/02/programmingJava.
		 * lec3_.4Scanner.pdf
		 */

		double doubleFoo;
		int integerBar;
		float floatQuiz;
		long longBaz;
		String token;
		String line;

		try (Scanner stdInScanner = new Scanner(System.in)) {
			doubleFoo = stdInScanner.nextDouble();
			integerBar = stdInScanner.nextInt();
			floatQuiz = stdInScanner.nextFloat();
			longBaz = stdInScanner.nextLong();
			token = stdInScanner.next();
			line = stdInScanner.nextLine();
		}

		System.out.printf("double=%f\nint=%d\nfloat=%f\nlong=%d\ntoken=%s\nline=%s\n", doubleFoo, integerBar, floatQuiz,
				longBaz, token, line);
		System.out.println("over");
	}
}

/*
 * Як працює програма: 1,1 2 3 4 5
 * double=1,100000
 * int=2
 * float=3,000000
 * long=4
 * token=5
 * line=
 * over
 *
 * Детальніше про метод printf() ми розглянемо у наступному параграфі, а поки суть така:
 * перший параметр — це форматуючий рядок, у якому є спеціальні символи (починаються з %),
 * які замінюються відповідними значеннями зі списку параметрів.
 *
 * Користувацький ввід позначений зеленим, вивід програми — чорним.
 *
 * Для чисел (цілих та дійсних) все логічно: користувач вводить число і натискає Enter.
 * Значення потрапляє у System.in і зчитується сканером.
 *
 * Кожен рядок містить лише одне число.
 *
 * Методи nextFloat() і nextDouble() можуть зчитувати і цілі числа, але вони будуть представлені як дійсні.
 *
 * Таким чином, ми зчитуємо 4 числа у змінні doubleFoo, integerBar, floatQuiz, longBaz.
 *
 * Але далі проявляється особливість nextLine(). Після числових методів йдуть виклики next() і nextLine():
 *
 * String token = stdInScanner.next();
 * String line = stdInScanner.nextLine();
 *
 * Здавалось би, після вводу числа 5 (яке зчитується next() і записується у token), програма має чекати введення рядка,
 * але цього не відбувається — програма завершує роботу, а line залишається порожнім.
 *
 * Що потрапляє у потік при вводі 5 і натисканні Enter?
 * Потік містить символ '5' і символ кінця рядка.
 *
 * Кінець рядка за замовчуванням є роздільником токенів, тому все до нього було зчитано методом next(),
 * і курсор встановився після '5', але перед кінцем рядка.
 *
 * Потім викликається nextLine(), який бачить залишок — кінець рядка — і зчитує його, але між курсором і кінцем рядка немає символів,
 * тому в результаті повертається порожній рядок, і line не містить значення.
 *
 * Щодо символів кінця рядка:
 * За стандартом Unicode всі сумісні додатки повинні розпізнавати такі символи як кінець рядка:
 * LF (U+000A): line feed — перехід на новий рядок;
 * CR (U+000D): carriage return — повернення каретки;
 * CR + LF — розглядаються як один кінець рядка;
 * NEL (U+0085): next line — перехід на наступний рядок;
 * LS (U+2028): line separator — роздільник рядків;
 * PS (U+2029): paragraph separator — роздільник абзаців.
 *
 * В стандартних ASCII-файлах в залежності від ОС використовуються:
 * LF — Unix, FreeBSD, MacOS...
 * CR — старі версії MacOS
 * CR + LF — MSDOS, Windows
 *
 * Інший приклад вводу для програми: 1,1 2 3 4 5 678 9
 * Вивід:
 * double=1,100000
 * int=2
 * float=3,000000
 * long=4
 * token=5
 * line= 678 9
 * over
 *
 * Цей приклад показує кілька нюансів:
 *
 * 1) За замовчуванням "зайві" пробіли ігноруються при пошуку токенів методом Scanner.
 * 2) Раніше всі методи зчитування блокували програму поки користувач щось не введе, зараз блокування відбувається лише у nextDouble() і next().
 * 3) Після зчитування токена інші символи залишаються у потоці і можуть бути прочитані наступними викликами.
 * У цьому випадку nextDouble() блокує програму, поки користувач не введе "1,1 2 3 4".
 * Метод зчитує 1,1 і встановлює курсор після нього.
 * Наступний метод зчитує пробіли, потім 2, курсор встановлюється після '2'.
 * Далі два методи послідовно зчитують 3 і 4 без блокування.
 * 4) Курсор після nextX() встановлюється після зчитаного токена, а пробіли після токена зчитуються наступним викликом nextX().
 * next() зчитав '5', а nextLine() повернув рядок з символів між '5' і кінцем рядка (включно з пробілом між '5' і '678').
 */
